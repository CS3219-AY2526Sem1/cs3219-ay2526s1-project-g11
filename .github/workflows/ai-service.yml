name: AI Service CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.17"

      - name: Install dependencies
        run: uv sync
        working-directory: backend/ai-service

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      ARTIFACT_REPOSITORY: ${{ secrets.ARTIFACT_REPOSITORY }}
      CLOUD_RUN_SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}
      IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REPOSITORY }}/ai-service:${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          docker build -t $IMAGE .
        working-directory: backend/ai-service

      - name: Push Docker image
        run: docker push $IMAGE

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $CLOUD_RUN_SERVICE \
            --image $IMAGE \
            --region $GCP_REGION \
            --platform managed \
            --allow-unauthenticated

      - name: Lint
        run: uv run ruff check .
        working-directory: backend/ai-service
        continue-on-error: true

      - name: Test FastAPI app imports
        run: |
          uv run python -c "
          try:
              from app.main import app
              print('✅ FastAPI app imports successfully')
              print(f'✅ App title: {app.title}')
          except Exception as e:
              print(f'❌ Import failed: {e}')
              exit(1)
          "
        working-directory: backend/ai-service

      - name: Test API endpoints (basic)
        run: |
          uv run python -c "
          from fastapi.testclient import TestClient
          from app.main import app

          client = TestClient(app)

          response = client.get('/health')
          assert response.status_code == 200, 'Health endpoint failed'
          print('✅ Health endpoint works')
          "
        working-directory: backend/ai-service
